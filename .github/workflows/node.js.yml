# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        node-version: [ 16.x, 18.x ]
        os: [ "ubuntu-latest", "windows-latest", "macos-latest" ]
        arch: [ x64, arm64 ]
        exclude:
          # https://github.com/xuxiaowei-com-cn/electron-tools/actions/runs/5128498312/jobs/9225241332
          - arch: arm64
            os: ubuntu-latest
            node-version: 18.x
          # https://github.com/xuxiaowei-com-cn/electron-tools/actions/runs/5128523146/jobs/9225286730
          - arch: arm64
            os: ubuntu-latest
            node-version: 16.x
          # https://github.com/xuxiaowei-com-cn/electron-tools/actions/runs/5128523146/jobs/9225286883
          - arch: arm64
            os: windows-latest
            node-version: 16.x
          # https://github.com/xuxiaowei-com-cn/electron-tools/actions/runs/5128534557/jobs/9225307705
          - arch: arm64
            os: windows-latest
            node-version: 18.x
          # https://github.com/xuxiaowei-com-cn/electron-tools/actions/runs/5128542346/jobs/9225322231
          - arch: arm64
            os: macos-latest
            node-version: 16.x
          # https://github.com/xuxiaowei-com-cn/electron-tools/actions/runs/5128542346/jobs/9225322524
          - arch: arm64
            os: macos-latest
            node-version: 18.x

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }} ${{ matrix.arch }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          architecture: ${{ matrix.arch }}

      - name: Cache modules
        uses: actions/cache@v3
        id: cache-modules
        with:
          path: |
            ~/.npm
            $GITHUB_WORKSPACE/node_modules/
            # ubuntu
            ${HOME}/.cache/electron
            ${HOME}/.cache/electron-builder
            # macos
            ${HOME}/Library/Caches/electron
            # windows
            %USERPROFILE%\AppData\Local\electron
            %USERPROFILE%\AppData\Local\electron-builder
          key: ${{ matrix.os }}-${{ hashFiles('package.json') }}
          restore-keys: |
            ${{ matrix.os }}-

      - name: Show macOS version
        if: ${{ matrix.os == 'macos-latest' }}
        run: sw_vers

      - name: Ubuntu Rename artifactName
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: sh
        run: |
          # 刪除特殊字符
          sed -i 's/\r$//' electron-builder.json5
          # 准备打包的文件命名方式
          echo 's/${productName}_${version}-${arch}.${ext}/${productName}_${version}-node-${{ matrix.node-version }}-${arch}.${ext}/'
          # 修改为准备打包的文件命名方式
          sed -i 's/${productName}_${version}-${arch}.${ext}/${productName}_${version}-node-${{ matrix.node-version }}-${arch}.${ext}/' electron-builder.json5
          # 查看修改结果
          cat electron-builder.json5

      - name: macOS Rename artifactName
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          # 刪除特殊字符
          sed -i '' 's/\r$//' electron-builder.json5
          # 准备打包的文件命名方式
          echo 's/${productName}_${version}-${arch}.${ext}/${productName}_${version}-node-${{ matrix.node-version }}-${arch}.${ext}/'
          # 修改为准备打包的文件命名方式
          sed -i '' 's/${productName}_${version}-${arch}.${ext}/${productName}_${version}-node-${{ matrix.node-version }}-${arch}.${ext}/' electron-builder.json5
          # 查看修改结果
          cat electron-builder.json5

      - name: Windows Rename artifactName
        if: ${{ matrix.os == 'windows-latest' }}
        shell: powershell
        run: |
          # 准备打包的文件命名方式
          echo 's/${productName}_${version}-${arch}.${ext}/${productName}_${version}-node-${{ matrix.node-version }}-${arch}.${ext}/'
          # 修改为准备打包的文件命名方式
          (Get-Content electron-builder.json5) -replace '\$\{productName\}_\$\{version\}\-\$\{arch\}\.\$\{ext\}', '${productName}_${version}-node-${{ matrix.node-version }}-${arch}.${ext}' | Set-Content electron-builder.json5
          # 查看修改结果
          cat electron-builder.json5

      - run: node -v
      - run: npm i
      - run: npm run build
      - run: npm run electron:build
      - run: ls release
      - run: ls release/1.0.0

      - name: Ubuntu ls electron
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          ls ${HOME}/.cache
          ls ${HOME}/.cache/electron
          ls ${HOME}/.cache/electron-builder
          ls ${HOME}/.cache/electron-builder/appimage

      - name: Macos ls electron
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          ls ${HOME}/Library/Caches
          ls ${HOME}/Library/Caches/electron

      - name: Windows ls electron
        if: ${{ matrix.os == 'windows-latest' }}
        shell: cmd
        run: |
          dir %USERPROFILE%\AppData\Local
          dir %USERPROFILE%\AppData\Local\electron
          dir %USERPROFILE%\AppData\Local\electron\Cache
          dir %USERPROFILE%\AppData\Local\electron-builder
          dir %USERPROFILE%\AppData\Local\electron-builder\Cache

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: electron-tools-${{ matrix.os }}-${{ matrix.node-version }}-${{ matrix.arch }}
          path: |
            release/1.0.0/electron-tools_1.0.0-node-16.x-x86_64.AppImage
            release/1.0.0/electron-tools_1.0.0-node-16.x-ia32.exe
            release/1.0.0/electron-tools_1.0.0-node-16.x-x64.exe
            release/1.0.0/electron-tools_1.0.0-node-16.x.exe
            release/1.0.0/electron-tools_1.0.0-node-16.x-x64.dmg
            release/1.0.0/electron-tools_1.0.0-node-18.x-x86_64.AppImage
            release/1.0.0/electron-tools_1.0.0-node-18.x-ia32.exe
            release/1.0.0/electron-tools_1.0.0-node-18.x-x64.exe
            release/1.0.0/electron-tools_1.0.0-node-18.x.exe
            release/1.0.0/electron-tools_1.0.0-node-18.x-x64.dmg


  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # if: startsWith(github.ref, 'refs/heads/main')
    steps:

      - name: Get current date
        id: date
        # bash, sh, cmd, powershell, pwsh
        # shell 类型必须为 sh，否则：
        # $GITHUB_ENV：仅支持 ubuntu、macos
        # $env:GITHUB_ENV：仅支持 windows
        shell: sh
        run: |
          echo "YEAR_MONTH_DAY=$(date +'%Y-%m-%dZ')" >> $GITHUB_ENV
          echo "YEAR_MONTH_DAY_HOUR=$(date +'%Y-%m-%dT%HZ')" >> $GITHUB_ENV
          echo "YEAR_MONTH_DAY_HOUR_MINUTE=$(date +'%Y-%m-%dT%H-%MZ')" >> $GITHUB_ENV

      - name: Download Artifacts electron-tools-macos-latest-16.x
        uses: actions/download-artifact@v3
        with:
          name: electron-tools-macos-latest-16.x
          path: .

      - name: Download Artifacts electron-tools-macos-latest-18.x
        uses: actions/download-artifact@v3
        with:
          name: electron-tools-macos-latest-18.x
          path: .

      - name: Download Artifacts electron-tools-ubuntu-latest-16.x
        uses: actions/download-artifact@v3
        with:
          name: electron-tools-ubuntu-latest-16.x
          path: .

      - name: Download Artifacts electron-tools-ubuntu-latest-18.x
        uses: actions/download-artifact@v3
        with:
          name: electron-tools-ubuntu-latest-18.x
          path: .

      - name: Download Artifacts electron-tools-windows-latest-16.x
        uses: actions/download-artifact@v3
        with:
          name: electron-tools-windows-latest-16.x
          path: .

      - name: Download Artifacts electron-tools-windows-latest-18.x
        uses: actions/download-artifact@v3
        with:
          name: electron-tools-windows-latest-18.x
          path: .

      - run: ls

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            electron-tools_1.0.0-node-16.x-x86_64.AppImage
            electron-tools_1.0.0-node-16.x-ia32.exe
            electron-tools_1.0.0-node-16.x-x64.exe
            electron-tools_1.0.0-node-16.x.exe
            electron-tools_1.0.0-node-16.x-x64.dmg
            electron-tools_1.0.0-node-18.x-x86_64.AppImage
            electron-tools_1.0.0-node-18.x-ia32.exe
            electron-tools_1.0.0-node-18.x-x64.exe
            electron-tools_1.0.0-node-18.x.exe
            electron-tools_1.0.0-node-18.x-x64.dmg
          body:
            自动推送时的发布
          # draft: 草稿状态，为 true 时，不创建标签，默认为 false
          # draft: true
          # prerelease：是否发布预发布版，默认为 false
          prerelease: true
          name: 1.0.0-${{ env.YEAR_MONTH_DAY_HOUR_MINUTE }}
          tag: v1.0.0-${{ env.YEAR_MONTH_DAY_HOUR_MINUTE }}
          token: ${{ secrets.GITHUB_TOKEN }}


  # https://docs.github.com/zh/enterprise-cloud@latest/code-security/dependabot/working-with-dependabot/automating-dependabot-with-github-actions
  dependabot:
    name: Dependabot
    # 需要所有 build 完成后，才运行
    needs: build
    runs-on: ${{ matrix.os }}
    permissions:
      # 可以修改仓库中的文件内容
      contents: write
      # # 可以新建或修改 Pull Request
      pull-requests: write
    # 依赖机器人 && 仅PR
    if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request' }}

    strategy:
      matrix:
        os: [ "ubuntu-latest" ]

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # 获取所有的代码历史记录，包括分支和标签
          fetch-depth: 0

      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: echo
        run: |
          echo ${{ github.event.pull_request.html_url }}
          echo ${{ steps.metadata.outputs.dependency-names }}
          echo ${{ steps.metadata.outputs.update-type }}
          echo ${{ 'version-update:semver-patch' }}

      - name: Enable auto-merge for Dependabot PRs
        # if: ${{contains(steps.metadata.outputs.dependency-names, 'my-dependency') && steps.metadata.outputs.update-type == 'version-update:semver-patch'}}
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
